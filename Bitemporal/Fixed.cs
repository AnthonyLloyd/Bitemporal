using System;

namespace Bitemporal
{
    public struct Fixed1
    {
        internal readonly long I;
        internal Fixed1(long v) => I = v;
        public static implicit operator Fixed1(long v) => new(v * 10);
        public static implicit operator double(Fixed1 v) => v.I * 1e-1;
        public override string ToString() => (I * 1e-1).ToString("#,##0.0");
        public static Fixed1 Round(double v) => new((long)Math.Round(v * 1e1));
        public static Fixed1 Round(decimal v) => new((long)Math.Round(v * 1e1m));
        public static Fixed1 Round(Fixed2 v) => new((long)Math.Round(v.I * 1e-1));
        public static Fixed1 Round(Fixed3 v) => new((long)Math.Round(v.I * 1e-2));
        public static Fixed1 Round(Fixed4 v) => new((long)Math.Round(v.I * 1e-3));
        public static Fixed1 Round(Fixed5 v) => new((long)Math.Round(v.I * 1e-4));
        public static Fixed1 Round(Fixed6 v) => new((long)Math.Round(v.I * 1e-5));
        public static Fixed1 Round(Fixed7 v) => new((long)Math.Round(v.I * 1e-6));
        public static Fixed1 Round(Fixed8 v) => new((long)Math.Round(v.I * 1e-7));
        public static Fixed1 Round(Fixed9 v) => new((long)Math.Round(v.I * 1e-8));
        public static Fixed1 operator +(Fixed1 a, long b) => new(a.I + b * 10);
        public static Fixed1 operator +(long a, Fixed1 b) => new(a * 10 + b.I);
        public static double operator +(Fixed1 a, double b) => a.I * 1e-1 + b;
        public static double operator +(double a, Fixed1 b) => a + b.I * 1e-1;
        public static Fixed1 operator +(Fixed1 a, Fixed1 b) => new(a.I + b.I);
        public static Fixed1 operator -(Fixed1 a, long b) => new(a.I - b * 10);
        public static Fixed1 operator -(long a, Fixed1 b) => new(a * 10 - b.I);
        public static double operator -(Fixed1 a, double b) => a.I * 1e-1 - b;
        public static double operator -(double a, Fixed1 b) => a - b.I * 1e-1;
        public static Fixed1 operator -(Fixed1 a, Fixed1 b) => new(a.I - b.I);
        public static Fixed1 operator *(Fixed1 a, long b) => new(a.I * b);
        public static Fixed1 operator *(long a, Fixed1 b) => new(a * b.I);
        public static double operator *(Fixed1 a, double b) => a.I * 1e-1 * b;
        public static double operator *(double a, Fixed1 b) => a * b.I * 1e-1;
        public static Fixed2 operator *(Fixed1 a, Fixed1 b) => new(a.I * b.I);
        public static double operator /(Fixed1 a, long b) => a.I * 1e-1 / b;
        public static double operator /(long a, Fixed1 b) => a / (b.I * 1e-1);
        public static double operator /(Fixed1 a, double b) => a.I * 1e-1 / b;
        public static double operator /(double a, Fixed1 b) => a / b.I * 1e1;
        public static double operator /(Fixed1 a, Fixed1 b) => (double)a.I / b.I;
    }

    public struct Fixed2
    {
        internal readonly long I;
        internal Fixed2(long v) => I = v;
        public static implicit operator Fixed2(long v) => new(v * 100);
        public static implicit operator double(Fixed2 v) => v.I * 1e-2;
        public override string ToString() => (I * 1e-2).ToString("#,##0.00");
        public static Fixed2 Round(double v) => new((long)Math.Round(v * 1e2));
        public static Fixed2 Round(decimal v) => new((long)Math.Round(v * 1e2m));
        public static Fixed2 Round(Fixed3 v) => new((long)Math.Round(v.I * 1e-1));
        public static Fixed2 Round(Fixed4 v) => new((long)Math.Round(v.I * 1e-2));
        public static Fixed2 Round(Fixed5 v) => new((long)Math.Round(v.I * 1e-3));
        public static Fixed2 Round(Fixed6 v) => new((long)Math.Round(v.I * 1e-4));
        public static Fixed2 Round(Fixed7 v) => new((long)Math.Round(v.I * 1e-5));
        public static Fixed2 Round(Fixed8 v) => new((long)Math.Round(v.I * 1e-6));
        public static Fixed2 Round(Fixed9 v) => new((long)Math.Round(v.I * 1e-7));
        public static Fixed2 operator +(Fixed2 a, long b) => new(a.I + b * 100);
        public static Fixed2 operator +(long a, Fixed2 b) => new(a * 100 + b.I);
        public static double operator +(Fixed2 a, double b) => a.I * 1e-2 + b;
        public static double operator +(double a, Fixed2 b) => a + b.I * 1e-2;
        public static Fixed2 operator +(Fixed2 a, Fixed1 b) => new(a.I + b.I * 10);
        public static Fixed2 operator +(Fixed1 a, Fixed2 b) => new(a.I * 10 + b.I);
        public static Fixed2 operator +(Fixed2 a, Fixed2 b) => new(a.I + b.I);
        public static Fixed2 operator -(Fixed2 a, long b) => new(a.I - b * 100);
        public static Fixed2 operator -(long a, Fixed2 b) => new(a * 100 - b.I);
        public static double operator -(Fixed2 a, double b) => a.I * 1e-2 - b;
        public static double operator -(double a, Fixed2 b) => a - b.I * 1e-2;
        public static Fixed2 operator -(Fixed2 a, Fixed1 b) => new(a.I - b.I * 10);
        public static Fixed2 operator -(Fixed1 a, Fixed2 b) => new(a.I * 10 - b.I);
        public static Fixed2 operator -(Fixed2 a, Fixed2 b) => new(a.I - b.I);
        public static Fixed2 operator *(Fixed2 a, long b) => new(a.I * b);
        public static Fixed2 operator *(long a, Fixed2 b) => new(a * b.I);
        public static double operator *(Fixed2 a, double b) => a.I * 1e-2 * b;
        public static double operator *(double a, Fixed2 b) => a * b.I * 1e-2;
        public static Fixed3 operator *(Fixed2 a, Fixed1 b) => new(a.I * b.I);
        public static Fixed3 operator *(Fixed1 a, Fixed2 b) => new(a.I * b.I);
        public static Fixed4 operator *(Fixed2 a, Fixed2 b) => new(a.I * b.I);
        public static double operator /(Fixed2 a, long b) => a.I * 1e-2 / b;
        public static double operator /(long a, Fixed2 b) => a / (b.I * 1e-2);
        public static double operator /(Fixed2 a, double b) => a.I * 1e-2 / b;
        public static double operator /(double a, Fixed2 b) => a / b.I * 1e2;
        public static double operator /(Fixed2 a, Fixed1 b) => a.I * 1e-1 / b.I;
        public static double operator /(Fixed1 a, Fixed2 b) => a.I * 1e1 / b.I;
        public static double operator /(Fixed2 a, Fixed2 b) => (double)a.I / b.I;
    }

    public struct Fixed3
    {
        internal readonly long I;
        internal Fixed3(long v) => I = v;
        public static implicit operator Fixed3(long v) => new(v * 1000);
        public static implicit operator double(Fixed3 v) => v.I * 1e-3;
        public override string ToString() => (I * 1e-3).ToString("#,##0.000");
        public static Fixed3 Round(double v) => new((long)Math.Round(v * 1e3));
        public static Fixed3 Round(decimal v) => new((long)Math.Round(v * 1e3m));
        public static Fixed3 Round(Fixed4 v) => new((long)Math.Round(v.I * 1e-1));
        public static Fixed3 Round(Fixed5 v) => new((long)Math.Round(v.I * 1e-2));
        public static Fixed3 Round(Fixed6 v) => new((long)Math.Round(v.I * 1e-3));
        public static Fixed3 Round(Fixed7 v) => new((long)Math.Round(v.I * 1e-4));
        public static Fixed3 Round(Fixed8 v) => new((long)Math.Round(v.I * 1e-5));
        public static Fixed3 Round(Fixed9 v) => new((long)Math.Round(v.I * 1e-6));
        public static Fixed3 operator +(Fixed3 a, long b) => new(a.I + b * 1000);
        public static Fixed3 operator +(long a, Fixed3 b) => new(a * 1000 + b.I);
        public static double operator +(Fixed3 a, double b) => a.I * 1e-3 + b;
        public static double operator +(double a, Fixed3 b) => a + b.I * 1e-3;
        public static Fixed3 operator +(Fixed3 a, Fixed1 b) => new(a.I + b.I * 100);
        public static Fixed3 operator +(Fixed1 a, Fixed3 b) => new(a.I * 100 + b.I);
        public static Fixed3 operator +(Fixed3 a, Fixed2 b) => new(a.I + b.I * 10);
        public static Fixed3 operator +(Fixed2 a, Fixed3 b) => new(a.I * 10 + b.I);
        public static Fixed3 operator +(Fixed3 a, Fixed3 b) => new(a.I + b.I);
        public static Fixed3 operator -(Fixed3 a, long b) => new(a.I - b * 1000);
        public static Fixed3 operator -(long a, Fixed3 b) => new(a * 1000 - b.I);
        public static double operator -(Fixed3 a, double b) => a.I * 1e-3 - b;
        public static double operator -(double a, Fixed3 b) => a - b.I * 1e-3;
        public static Fixed3 operator -(Fixed3 a, Fixed1 b) => new(a.I - b.I * 100);
        public static Fixed3 operator -(Fixed1 a, Fixed3 b) => new(a.I * 100 - b.I);
        public static Fixed3 operator -(Fixed3 a, Fixed2 b) => new(a.I - b.I * 10);
        public static Fixed3 operator -(Fixed2 a, Fixed3 b) => new(a.I * 10 - b.I);
        public static Fixed3 operator -(Fixed3 a, Fixed3 b) => new(a.I - b.I);
        public static Fixed3 operator *(Fixed3 a, long b) => new(a.I * b);
        public static Fixed3 operator *(long a, Fixed3 b) => new(a * b.I);
        public static double operator *(Fixed3 a, double b) => a.I * 1e-3 * b;
        public static double operator *(double a, Fixed3 b) => a * b.I * 1e-3;
        public static Fixed4 operator *(Fixed3 a, Fixed1 b) => new(a.I * b.I);
        public static Fixed4 operator *(Fixed1 a, Fixed3 b) => new(a.I * b.I);
        public static Fixed5 operator *(Fixed3 a, Fixed2 b) => new(a.I * b.I);
        public static Fixed5 operator *(Fixed2 a, Fixed3 b) => new(a.I * b.I);
        public static Fixed6 operator *(Fixed3 a, Fixed3 b) => new(a.I * b.I);
        public static double operator /(Fixed3 a, long b) => a.I * 1e-3 / b;
        public static double operator /(long a, Fixed3 b) => a / (b.I * 1e-3);
        public static double operator /(Fixed3 a, double b) => a.I * 1e-3 / b;
        public static double operator /(double a, Fixed3 b) => a / b.I * 1e3;
        public static double operator /(Fixed3 a, Fixed1 b) => a.I * 1e-2 / b.I;
        public static double operator /(Fixed1 a, Fixed3 b) => a.I * 1e2 / b.I;
        public static double operator /(Fixed3 a, Fixed2 b) => a.I * 1e-1 / b.I;
        public static double operator /(Fixed2 a, Fixed3 b) => a.I * 1e1 / b.I;
        public static double operator /(Fixed3 a, Fixed3 b) => (double)a.I / b.I;
    }

    public struct Fixed4
    {
        internal readonly long I;
        internal Fixed4(long v) => I = v;
        public static implicit operator Fixed4(long v) => new(v * 10000);
        public static implicit operator double(Fixed4 v) => v.I * 1e-4;
        public override string ToString() => (I * 1e-4).ToString("#,##0.0000");
        public static Fixed4 Round(double v) => new((long)Math.Round(v * 1e4));
        public static Fixed4 Round(decimal v) => new((long)Math.Round(v * 1e4m));
        public static Fixed4 Round(Fixed5 v) => new((long)Math.Round(v.I * 1e-1));
        public static Fixed4 Round(Fixed6 v) => new((long)Math.Round(v.I * 1e-2));
        public static Fixed4 Round(Fixed7 v) => new((long)Math.Round(v.I * 1e-3));
        public static Fixed4 Round(Fixed8 v) => new((long)Math.Round(v.I * 1e-4));
        public static Fixed4 Round(Fixed9 v) => new((long)Math.Round(v.I * 1e-5));
        public static Fixed4 operator +(Fixed4 a, long b) => new(a.I + b * 10000);
        public static Fixed4 operator +(long a, Fixed4 b) => new(a * 10000 + b.I);
        public static double operator +(Fixed4 a, double b) => a.I * 1e-4 + b;
        public static double operator +(double a, Fixed4 b) => a + b.I * 1e-4;
        public static Fixed4 operator +(Fixed4 a, Fixed1 b) => new(a.I + b.I * 1000);
        public static Fixed4 operator +(Fixed1 a, Fixed4 b) => new(a.I * 1000 + b.I);
        public static Fixed4 operator +(Fixed4 a, Fixed2 b) => new(a.I + b.I * 100);
        public static Fixed4 operator +(Fixed2 a, Fixed4 b) => new(a.I * 100 + b.I);
        public static Fixed4 operator +(Fixed4 a, Fixed3 b) => new(a.I + b.I * 10);
        public static Fixed4 operator +(Fixed3 a, Fixed4 b) => new(a.I * 10 + b.I);
        public static Fixed4 operator +(Fixed4 a, Fixed4 b) => new(a.I + b.I);
        public static Fixed4 operator -(Fixed4 a, long b) => new(a.I - b * 10000);
        public static Fixed4 operator -(long a, Fixed4 b) => new(a * 10000 - b.I);
        public static double operator -(Fixed4 a, double b) => a.I * 1e-4 - b;
        public static double operator -(double a, Fixed4 b) => a - b.I * 1e-4;
        public static Fixed4 operator -(Fixed4 a, Fixed1 b) => new(a.I - b.I * 1000);
        public static Fixed4 operator -(Fixed1 a, Fixed4 b) => new(a.I * 1000 - b.I);
        public static Fixed4 operator -(Fixed4 a, Fixed2 b) => new(a.I - b.I * 100);
        public static Fixed4 operator -(Fixed2 a, Fixed4 b) => new(a.I * 100 - b.I);
        public static Fixed4 operator -(Fixed4 a, Fixed3 b) => new(a.I - b.I * 10);
        public static Fixed4 operator -(Fixed3 a, Fixed4 b) => new(a.I * 10 - b.I);
        public static Fixed4 operator -(Fixed4 a, Fixed4 b) => new(a.I - b.I);
        public static Fixed4 operator *(Fixed4 a, long b) => new(a.I * b);
        public static Fixed4 operator *(long a, Fixed4 b) => new(a * b.I);
        public static double operator *(Fixed4 a, double b) => a.I * 1e-4 * b;
        public static double operator *(double a, Fixed4 b) => a * b.I * 1e-4;
        public static Fixed5 operator *(Fixed4 a, Fixed1 b) => new(a.I * b.I);
        public static Fixed5 operator *(Fixed1 a, Fixed4 b) => new(a.I * b.I);
        public static Fixed6 operator *(Fixed4 a, Fixed2 b) => new(a.I * b.I);
        public static Fixed6 operator *(Fixed2 a, Fixed4 b) => new(a.I * b.I);
        public static Fixed7 operator *(Fixed4 a, Fixed3 b) => new(a.I * b.I);
        public static Fixed7 operator *(Fixed3 a, Fixed4 b) => new(a.I * b.I);
        public static Fixed8 operator *(Fixed4 a, Fixed4 b) => new(a.I * b.I);
        public static double operator /(Fixed4 a, long b) => a.I * 1e-4 / b;
        public static double operator /(long a, Fixed4 b) => a / (b.I * 1e-4);
        public static double operator /(Fixed4 a, double b) => a.I * 1e-4 / b;
        public static double operator /(double a, Fixed4 b) => a / b.I * 1e4;
        public static double operator /(Fixed4 a, Fixed1 b) => a.I * 1e-3 / b.I;
        public static double operator /(Fixed1 a, Fixed4 b) => a.I * 1e3 / b.I;
        public static double operator /(Fixed4 a, Fixed2 b) => a.I * 1e-2 / b.I;
        public static double operator /(Fixed2 a, Fixed4 b) => a.I * 1e2 / b.I;
        public static double operator /(Fixed4 a, Fixed3 b) => a.I * 1e-1 / b.I;
        public static double operator /(Fixed3 a, Fixed4 b) => a.I * 1e1 / b.I;
        public static double operator /(Fixed4 a, Fixed4 b) => (double)a.I / b.I;
    }

    public struct Fixed5
    {
        internal readonly long I;
        internal Fixed5(long v) => I = v;
        public static implicit operator Fixed5(long v) => new(v * 100000);
        public static implicit operator double(Fixed5 v) => v.I * 1e-5;
        public override string ToString() => (I * 1e-5).ToString("#,##0.00000");
        public static Fixed5 Round(double v) => new((long)Math.Round(v * 1e5));
        public static Fixed5 Round(decimal v) => new((long)Math.Round(v * 1e5m));
        public static Fixed5 Round(Fixed6 v) => new((long)Math.Round(v.I * 1e-1));
        public static Fixed5 Round(Fixed7 v) => new((long)Math.Round(v.I * 1e-2));
        public static Fixed5 Round(Fixed8 v) => new((long)Math.Round(v.I * 1e-3));
        public static Fixed5 Round(Fixed9 v) => new((long)Math.Round(v.I * 1e-4));
        public static Fixed5 operator +(Fixed5 a, long b) => new(a.I + b * 100000);
        public static Fixed5 operator +(long a, Fixed5 b) => new(a * 100000 + b.I);
        public static double operator +(Fixed5 a, double b) => a.I * 1e-5 + b;
        public static double operator +(double a, Fixed5 b) => a + b.I * 1e-5;
        public static Fixed5 operator +(Fixed5 a, Fixed1 b) => new(a.I + b.I * 10000);
        public static Fixed5 operator +(Fixed1 a, Fixed5 b) => new(a.I * 10000 + b.I);
        public static Fixed5 operator +(Fixed5 a, Fixed2 b) => new(a.I + b.I * 1000);
        public static Fixed5 operator +(Fixed2 a, Fixed5 b) => new(a.I * 1000 + b.I);
        public static Fixed5 operator +(Fixed5 a, Fixed3 b) => new(a.I + b.I * 100);
        public static Fixed5 operator +(Fixed3 a, Fixed5 b) => new(a.I * 100 + b.I);
        public static Fixed5 operator +(Fixed5 a, Fixed4 b) => new(a.I + b.I * 10);
        public static Fixed5 operator +(Fixed4 a, Fixed5 b) => new(a.I * 10 + b.I);
        public static Fixed5 operator +(Fixed5 a, Fixed5 b) => new(a.I + b.I);
        public static Fixed5 operator -(Fixed5 a, long b) => new(a.I - b * 100000);
        public static Fixed5 operator -(long a, Fixed5 b) => new(a * 100000 - b.I);
        public static double operator -(Fixed5 a, double b) => a.I * 1e-5 - b;
        public static double operator -(double a, Fixed5 b) => a - b.I * 1e-5;
        public static Fixed5 operator -(Fixed5 a, Fixed1 b) => new(a.I - b.I * 10000);
        public static Fixed5 operator -(Fixed1 a, Fixed5 b) => new(a.I * 10000 - b.I);
        public static Fixed5 operator -(Fixed5 a, Fixed2 b) => new(a.I - b.I * 1000);
        public static Fixed5 operator -(Fixed2 a, Fixed5 b) => new(a.I * 1000 - b.I);
        public static Fixed5 operator -(Fixed5 a, Fixed3 b) => new(a.I - b.I * 100);
        public static Fixed5 operator -(Fixed3 a, Fixed5 b) => new(a.I * 100 - b.I);
        public static Fixed5 operator -(Fixed5 a, Fixed4 b) => new(a.I - b.I * 10);
        public static Fixed5 operator -(Fixed4 a, Fixed5 b) => new(a.I * 10 - b.I);
        public static Fixed5 operator -(Fixed5 a, Fixed5 b) => new(a.I - b.I);
        public static Fixed5 operator *(Fixed5 a, long b) => new(a.I * b);
        public static Fixed5 operator *(long a, Fixed5 b) => new(a * b.I);
        public static double operator *(Fixed5 a, double b) => a.I * 1e-5 * b;
        public static double operator *(double a, Fixed5 b) => a * b.I * 1e-5;
        public static Fixed6 operator *(Fixed5 a, Fixed1 b) => new(a.I * b.I);
        public static Fixed6 operator *(Fixed1 a, Fixed5 b) => new(a.I * b.I);
        public static Fixed7 operator *(Fixed5 a, Fixed2 b) => new(a.I * b.I);
        public static Fixed7 operator *(Fixed2 a, Fixed5 b) => new(a.I * b.I);
        public static Fixed8 operator *(Fixed5 a, Fixed3 b) => new(a.I * b.I);
        public static Fixed8 operator *(Fixed3 a, Fixed5 b) => new(a.I * b.I);
        public static Fixed9 operator *(Fixed5 a, Fixed4 b) => new(a.I * b.I);
        public static Fixed9 operator *(Fixed4 a, Fixed5 b) => new(a.I * b.I);
        public static double operator *(Fixed5 a, Fixed5 b) => a.I * 1e-10 * b.I;
        public static double operator /(Fixed5 a, long b) => a.I * 1e-5 / b;
        public static double operator /(long a, Fixed5 b) => a / (b.I * 1e-5);
        public static double operator /(Fixed5 a, double b) => a.I * 1e-5 / b;
        public static double operator /(double a, Fixed5 b) => a / b.I * 1e5;
        public static double operator /(Fixed5 a, Fixed1 b) => a.I * 1e-4 / b.I;
        public static double operator /(Fixed1 a, Fixed5 b) => a.I * 1e4 / b.I;
        public static double operator /(Fixed5 a, Fixed2 b) => a.I * 1e-3 / b.I;
        public static double operator /(Fixed2 a, Fixed5 b) => a.I * 1e3 / b.I;
        public static double operator /(Fixed5 a, Fixed3 b) => a.I * 1e-2 / b.I;
        public static double operator /(Fixed3 a, Fixed5 b) => a.I * 1e2 / b.I;
        public static double operator /(Fixed5 a, Fixed4 b) => a.I * 1e-1 / b.I;
        public static double operator /(Fixed4 a, Fixed5 b) => a.I * 1e1 / b.I;
        public static double operator /(Fixed5 a, Fixed5 b) => (double)a.I / b.I;
    }

    public struct Fixed6
    {
        internal readonly long I;
        internal Fixed6(long v) => I = v;
        public static implicit operator Fixed6(long v) => new(v * 1000000);
        public static implicit operator double(Fixed6 v) => v.I * 1e-6;
        public override string ToString() => (I * 1e-6).ToString("#,##0.000000");
        public static Fixed6 Round(double v) => new((long)Math.Round(v * 1e6));
        public static Fixed6 Round(decimal v) => new((long)Math.Round(v * 1e6m));
        public static Fixed6 Round(Fixed7 v) => new((long)Math.Round(v.I * 1e-1));
        public static Fixed6 Round(Fixed8 v) => new((long)Math.Round(v.I * 1e-2));
        public static Fixed6 Round(Fixed9 v) => new((long)Math.Round(v.I * 1e-3));
        public static Fixed6 operator +(Fixed6 a, long b) => new(a.I + b * 1000000);
        public static Fixed6 operator +(long a, Fixed6 b) => new(a * 1000000 + b.I);
        public static double operator +(Fixed6 a, double b) => a.I * 1e-6 + b;
        public static double operator +(double a, Fixed6 b) => a + b.I * 1e-6;
        public static Fixed6 operator +(Fixed6 a, Fixed1 b) => new(a.I + b.I * 100000);
        public static Fixed6 operator +(Fixed1 a, Fixed6 b) => new(a.I * 100000 + b.I);
        public static Fixed6 operator +(Fixed6 a, Fixed2 b) => new(a.I + b.I * 10000);
        public static Fixed6 operator +(Fixed2 a, Fixed6 b) => new(a.I * 10000 + b.I);
        public static Fixed6 operator +(Fixed6 a, Fixed3 b) => new(a.I + b.I * 1000);
        public static Fixed6 operator +(Fixed3 a, Fixed6 b) => new(a.I * 1000 + b.I);
        public static Fixed6 operator +(Fixed6 a, Fixed4 b) => new(a.I + b.I * 100);
        public static Fixed6 operator +(Fixed4 a, Fixed6 b) => new(a.I * 100 + b.I);
        public static Fixed6 operator +(Fixed6 a, Fixed5 b) => new(a.I + b.I * 10);
        public static Fixed6 operator +(Fixed5 a, Fixed6 b) => new(a.I * 10 + b.I);
        public static Fixed6 operator +(Fixed6 a, Fixed6 b) => new(a.I + b.I);
        public static Fixed6 operator -(Fixed6 a, long b) => new(a.I - b * 1000000);
        public static Fixed6 operator -(long a, Fixed6 b) => new(a * 1000000 - b.I);
        public static double operator -(Fixed6 a, double b) => a.I * 1e-6 - b;
        public static double operator -(double a, Fixed6 b) => a - b.I * 1e-6;
        public static Fixed6 operator -(Fixed6 a, Fixed1 b) => new(a.I - b.I * 100000);
        public static Fixed6 operator -(Fixed1 a, Fixed6 b) => new(a.I * 100000 - b.I);
        public static Fixed6 operator -(Fixed6 a, Fixed2 b) => new(a.I - b.I * 10000);
        public static Fixed6 operator -(Fixed2 a, Fixed6 b) => new(a.I * 10000 - b.I);
        public static Fixed6 operator -(Fixed6 a, Fixed3 b) => new(a.I - b.I * 1000);
        public static Fixed6 operator -(Fixed3 a, Fixed6 b) => new(a.I * 1000 - b.I);
        public static Fixed6 operator -(Fixed6 a, Fixed4 b) => new(a.I - b.I * 100);
        public static Fixed6 operator -(Fixed4 a, Fixed6 b) => new(a.I * 100 - b.I);
        public static Fixed6 operator -(Fixed6 a, Fixed5 b) => new(a.I - b.I * 10);
        public static Fixed6 operator -(Fixed5 a, Fixed6 b) => new(a.I * 10 - b.I);
        public static Fixed6 operator -(Fixed6 a, Fixed6 b) => new(a.I - b.I);
        public static Fixed6 operator *(Fixed6 a, long b) => new(a.I * b);
        public static Fixed6 operator *(long a, Fixed6 b) => new(a * b.I);
        public static double operator *(Fixed6 a, double b) => a.I * 1e-6 * b;
        public static double operator *(double a, Fixed6 b) => a * b.I * 1e-6;
        public static Fixed7 operator *(Fixed6 a, Fixed1 b) => new(a.I * b.I);
        public static Fixed7 operator *(Fixed1 a, Fixed6 b) => new(a.I * b.I);
        public static Fixed8 operator *(Fixed6 a, Fixed2 b) => new(a.I * b.I);
        public static Fixed8 operator *(Fixed2 a, Fixed6 b) => new(a.I * b.I);
        public static Fixed9 operator *(Fixed6 a, Fixed3 b) => new(a.I * b.I);
        public static Fixed9 operator *(Fixed3 a, Fixed6 b) => new(a.I * b.I);
        public static double operator *(Fixed6 a, Fixed4 b) => a.I * 1e-10 * b.I;
        public static double operator *(Fixed4 a, Fixed6 b) => a.I * 1e-10 * b.I;
        public static double operator *(Fixed6 a, Fixed5 b) => a.I * 1e-11 * b.I;
        public static double operator *(Fixed5 a, Fixed6 b) => a.I * 1e-11 * b.I;
        public static double operator *(Fixed6 a, Fixed6 b) => a.I * 1e-12 * b.I;
        public static double operator /(Fixed6 a, long b) => a.I * 1e-6 / b;
        public static double operator /(long a, Fixed6 b) => a / (b.I * 1e-6);
        public static double operator /(Fixed6 a, double b) => a.I * 1e-6 / b;
        public static double operator /(double a, Fixed6 b) => a / b.I * 1e6;
        public static double operator /(Fixed6 a, Fixed1 b) => a.I * 1e-5 / b.I;
        public static double operator /(Fixed1 a, Fixed6 b) => a.I * 1e5 / b.I;
        public static double operator /(Fixed6 a, Fixed2 b) => a.I * 1e-4 / b.I;
        public static double operator /(Fixed2 a, Fixed6 b) => a.I * 1e4 / b.I;
        public static double operator /(Fixed6 a, Fixed3 b) => a.I * 1e-3 / b.I;
        public static double operator /(Fixed3 a, Fixed6 b) => a.I * 1e3 / b.I;
        public static double operator /(Fixed6 a, Fixed4 b) => a.I * 1e-2 / b.I;
        public static double operator /(Fixed4 a, Fixed6 b) => a.I * 1e2 / b.I;
        public static double operator /(Fixed6 a, Fixed5 b) => a.I * 1e-1 / b.I;
        public static double operator /(Fixed5 a, Fixed6 b) => a.I * 1e1 / b.I;
        public static double operator /(Fixed6 a, Fixed6 b) => (double)a.I / b.I;
    }

    public struct Fixed7
    {
        internal readonly long I;
        internal Fixed7(long v) => I = v;
        public static implicit operator Fixed7(long v) => new(v * 10000000);
        public static implicit operator double(Fixed7 v) => v.I * 1e-7;
        public override string ToString() => (I * 1e-7).ToString("#,##0.0000000");
        public static Fixed7 Round(double v) => new((long)Math.Round(v * 1e7));
        public static Fixed7 Round(decimal v) => new((long)Math.Round(v * 1e7m));
        public static Fixed7 Round(Fixed8 v) => new((long)Math.Round(v.I * 1e-1));
        public static Fixed7 Round(Fixed9 v) => new((long)Math.Round(v.I * 1e-2));
        public static Fixed7 operator +(Fixed7 a, long b) => new(a.I + b * 10000000);
        public static Fixed7 operator +(long a, Fixed7 b) => new(a * 10000000 + b.I);
        public static double operator +(Fixed7 a, double b) => a.I * 1e-7 + b;
        public static double operator +(double a, Fixed7 b) => a + b.I * 1e-7;
        public static Fixed7 operator +(Fixed7 a, Fixed1 b) => new(a.I + b.I * 1000000);
        public static Fixed7 operator +(Fixed1 a, Fixed7 b) => new(a.I * 1000000 + b.I);
        public static Fixed7 operator +(Fixed7 a, Fixed2 b) => new(a.I + b.I * 100000);
        public static Fixed7 operator +(Fixed2 a, Fixed7 b) => new(a.I * 100000 + b.I);
        public static Fixed7 operator +(Fixed7 a, Fixed3 b) => new(a.I + b.I * 10000);
        public static Fixed7 operator +(Fixed3 a, Fixed7 b) => new(a.I * 10000 + b.I);
        public static Fixed7 operator +(Fixed7 a, Fixed4 b) => new(a.I + b.I * 1000);
        public static Fixed7 operator +(Fixed4 a, Fixed7 b) => new(a.I * 1000 + b.I);
        public static Fixed7 operator +(Fixed7 a, Fixed5 b) => new(a.I + b.I * 100);
        public static Fixed7 operator +(Fixed5 a, Fixed7 b) => new(a.I * 100 + b.I);
        public static Fixed7 operator +(Fixed7 a, Fixed6 b) => new(a.I + b.I * 10);
        public static Fixed7 operator +(Fixed6 a, Fixed7 b) => new(a.I * 10 + b.I);
        public static Fixed7 operator +(Fixed7 a, Fixed7 b) => new(a.I + b.I);
        public static Fixed7 operator -(Fixed7 a, long b) => new(a.I - b * 10000000);
        public static Fixed7 operator -(long a, Fixed7 b) => new(a * 10000000 - b.I);
        public static double operator -(Fixed7 a, double b) => a.I * 1e-7 - b;
        public static double operator -(double a, Fixed7 b) => a - b.I * 1e-7;
        public static Fixed7 operator -(Fixed7 a, Fixed1 b) => new(a.I - b.I * 1000000);
        public static Fixed7 operator -(Fixed1 a, Fixed7 b) => new(a.I * 1000000 - b.I);
        public static Fixed7 operator -(Fixed7 a, Fixed2 b) => new(a.I - b.I * 100000);
        public static Fixed7 operator -(Fixed2 a, Fixed7 b) => new(a.I * 100000 - b.I);
        public static Fixed7 operator -(Fixed7 a, Fixed3 b) => new(a.I - b.I * 10000);
        public static Fixed7 operator -(Fixed3 a, Fixed7 b) => new(a.I * 10000 - b.I);
        public static Fixed7 operator -(Fixed7 a, Fixed4 b) => new(a.I - b.I * 1000);
        public static Fixed7 operator -(Fixed4 a, Fixed7 b) => new(a.I * 1000 - b.I);
        public static Fixed7 operator -(Fixed7 a, Fixed5 b) => new(a.I - b.I * 100);
        public static Fixed7 operator -(Fixed5 a, Fixed7 b) => new(a.I * 100 - b.I);
        public static Fixed7 operator -(Fixed7 a, Fixed6 b) => new(a.I - b.I * 10);
        public static Fixed7 operator -(Fixed6 a, Fixed7 b) => new(a.I * 10 - b.I);
        public static Fixed7 operator -(Fixed7 a, Fixed7 b) => new(a.I - b.I);
        public static Fixed7 operator *(Fixed7 a, long b) => new(a.I * b);
        public static Fixed7 operator *(long a, Fixed7 b) => new(a * b.I);
        public static double operator *(Fixed7 a, double b) => a.I * 1e-7 * b;
        public static double operator *(double a, Fixed7 b) => a * b.I * 1e-7;
        public static Fixed8 operator *(Fixed7 a, Fixed1 b) => new(a.I * b.I);
        public static Fixed8 operator *(Fixed1 a, Fixed7 b) => new(a.I * b.I);
        public static Fixed9 operator *(Fixed7 a, Fixed2 b) => new(a.I * b.I);
        public static Fixed9 operator *(Fixed2 a, Fixed7 b) => new(a.I * b.I);
        public static double operator *(Fixed7 a, Fixed3 b) => a.I * 1e-10 * b.I;
        public static double operator *(Fixed3 a, Fixed7 b) => a.I * 1e-10 * b.I;
        public static double operator *(Fixed7 a, Fixed4 b) => a.I * 1e-11 * b.I;
        public static double operator *(Fixed4 a, Fixed7 b) => a.I * 1e-11 * b.I;
        public static double operator *(Fixed7 a, Fixed5 b) => a.I * 1e-12 * b.I;
        public static double operator *(Fixed5 a, Fixed7 b) => a.I * 1e-12 * b.I;
        public static double operator *(Fixed7 a, Fixed6 b) => a.I * 1e-13 * b.I;
        public static double operator *(Fixed6 a, Fixed7 b) => a.I * 1e-13 * b.I;
        public static double operator *(Fixed7 a, Fixed7 b) => a.I * 1e-14 * b.I;
        public static double operator /(Fixed7 a, long b) => a.I * 1e-7 / b;
        public static double operator /(long a, Fixed7 b) => a / (b.I * 1e-7);
        public static double operator /(Fixed7 a, double b) => a.I * 1e-7 / b;
        public static double operator /(double a, Fixed7 b) => a / b.I * 1e7;
        public static double operator /(Fixed7 a, Fixed1 b) => a.I * 1e-6 / b.I;
        public static double operator /(Fixed1 a, Fixed7 b) => a.I * 1e6 / b.I;
        public static double operator /(Fixed7 a, Fixed2 b) => a.I * 1e-5 / b.I;
        public static double operator /(Fixed2 a, Fixed7 b) => a.I * 1e5 / b.I;
        public static double operator /(Fixed7 a, Fixed3 b) => a.I * 1e-4 / b.I;
        public static double operator /(Fixed3 a, Fixed7 b) => a.I * 1e4 / b.I;
        public static double operator /(Fixed7 a, Fixed4 b) => a.I * 1e-3 / b.I;
        public static double operator /(Fixed4 a, Fixed7 b) => a.I * 1e3 / b.I;
        public static double operator /(Fixed7 a, Fixed5 b) => a.I * 1e-2 / b.I;
        public static double operator /(Fixed5 a, Fixed7 b) => a.I * 1e2 / b.I;
        public static double operator /(Fixed7 a, Fixed6 b) => a.I * 1e-1 / b.I;
        public static double operator /(Fixed6 a, Fixed7 b) => a.I * 1e1 / b.I;
        public static double operator /(Fixed7 a, Fixed7 b) => (double)a.I / b.I;
    }

    public struct Fixed8
    {
        internal readonly long I;
        internal Fixed8(long v) => I = v;
        public static implicit operator Fixed8(long v) => new(v * 100000000);
        public static implicit operator double(Fixed8 v) => v.I * 1e-8;
        public override string ToString() => (I * 1e-8).ToString("#,##0.00000000");
        public static Fixed8 Round(double v) => new((long)Math.Round(v * 1e8));
        public static Fixed8 Round(decimal v) => new((long)Math.Round(v * 1e8m));
        public static Fixed8 Round(Fixed9 v) => new((long)Math.Round(v.I * 1e-1));
        public static Fixed8 operator +(Fixed8 a, long b) => new(a.I + b * 100000000);
        public static Fixed8 operator +(long a, Fixed8 b) => new(a * 100000000 + b.I);
        public static double operator +(Fixed8 a, double b) => a.I * 1e-8 + b;
        public static double operator +(double a, Fixed8 b) => a + b.I * 1e-8;
        public static Fixed8 operator +(Fixed8 a, Fixed1 b) => new(a.I + b.I * 10000000);
        public static Fixed8 operator +(Fixed1 a, Fixed8 b) => new(a.I * 10000000 + b.I);
        public static Fixed8 operator +(Fixed8 a, Fixed2 b) => new(a.I + b.I * 1000000);
        public static Fixed8 operator +(Fixed2 a, Fixed8 b) => new(a.I * 1000000 + b.I);
        public static Fixed8 operator +(Fixed8 a, Fixed3 b) => new(a.I + b.I * 100000);
        public static Fixed8 operator +(Fixed3 a, Fixed8 b) => new(a.I * 100000 + b.I);
        public static Fixed8 operator +(Fixed8 a, Fixed4 b) => new(a.I + b.I * 10000);
        public static Fixed8 operator +(Fixed4 a, Fixed8 b) => new(a.I * 10000 + b.I);
        public static Fixed8 operator +(Fixed8 a, Fixed5 b) => new(a.I + b.I * 1000);
        public static Fixed8 operator +(Fixed5 a, Fixed8 b) => new(a.I * 1000 + b.I);
        public static Fixed8 operator +(Fixed8 a, Fixed6 b) => new(a.I + b.I * 100);
        public static Fixed8 operator +(Fixed6 a, Fixed8 b) => new(a.I * 100 + b.I);
        public static Fixed8 operator +(Fixed8 a, Fixed7 b) => new(a.I + b.I * 10);
        public static Fixed8 operator +(Fixed7 a, Fixed8 b) => new(a.I * 10 + b.I);
        public static Fixed8 operator +(Fixed8 a, Fixed8 b) => new(a.I + b.I);
        public static Fixed8 operator -(Fixed8 a, long b) => new(a.I - b * 100000000);
        public static Fixed8 operator -(long a, Fixed8 b) => new(a * 100000000 - b.I);
        public static double operator -(Fixed8 a, double b) => a.I * 1e-8 - b;
        public static double operator -(double a, Fixed8 b) => a - b.I * 1e-8;
        public static Fixed8 operator -(Fixed8 a, Fixed1 b) => new(a.I - b.I * 10000000);
        public static Fixed8 operator -(Fixed1 a, Fixed8 b) => new(a.I * 10000000 - b.I);
        public static Fixed8 operator -(Fixed8 a, Fixed2 b) => new(a.I - b.I * 1000000);
        public static Fixed8 operator -(Fixed2 a, Fixed8 b) => new(a.I * 1000000 - b.I);
        public static Fixed8 operator -(Fixed8 a, Fixed3 b) => new(a.I - b.I * 100000);
        public static Fixed8 operator -(Fixed3 a, Fixed8 b) => new(a.I * 100000 - b.I);
        public static Fixed8 operator -(Fixed8 a, Fixed4 b) => new(a.I - b.I * 10000);
        public static Fixed8 operator -(Fixed4 a, Fixed8 b) => new(a.I * 10000 - b.I);
        public static Fixed8 operator -(Fixed8 a, Fixed5 b) => new(a.I - b.I * 1000);
        public static Fixed8 operator -(Fixed5 a, Fixed8 b) => new(a.I * 1000 - b.I);
        public static Fixed8 operator -(Fixed8 a, Fixed6 b) => new(a.I - b.I * 100);
        public static Fixed8 operator -(Fixed6 a, Fixed8 b) => new(a.I * 100 - b.I);
        public static Fixed8 operator -(Fixed8 a, Fixed7 b) => new(a.I - b.I * 10);
        public static Fixed8 operator -(Fixed7 a, Fixed8 b) => new(a.I * 10 - b.I);
        public static Fixed8 operator -(Fixed8 a, Fixed8 b) => new(a.I - b.I);
        public static Fixed8 operator *(Fixed8 a, long b) => new(a.I * b);
        public static Fixed8 operator *(long a, Fixed8 b) => new(a * b.I);
        public static double operator *(Fixed8 a, double b) => a.I * 1e-8 * b;
        public static double operator *(double a, Fixed8 b) => a * b.I * 1e-8;
        public static Fixed9 operator *(Fixed8 a, Fixed1 b) => new(a.I * b.I);
        public static Fixed9 operator *(Fixed1 a, Fixed8 b) => new(a.I * b.I);
        public static double operator *(Fixed8 a, Fixed2 b) => a.I * 1e-10 * b.I;
        public static double operator *(Fixed2 a, Fixed8 b) => a.I * 1e-10 * b.I;
        public static double operator *(Fixed8 a, Fixed3 b) => a.I * 1e-11 * b.I;
        public static double operator *(Fixed3 a, Fixed8 b) => a.I * 1e-11 * b.I;
        public static double operator *(Fixed8 a, Fixed4 b) => a.I * 1e-12 * b.I;
        public static double operator *(Fixed4 a, Fixed8 b) => a.I * 1e-12 * b.I;
        public static double operator *(Fixed8 a, Fixed5 b) => a.I * 1e-13 * b.I;
        public static double operator *(Fixed5 a, Fixed8 b) => a.I * 1e-13 * b.I;
        public static double operator *(Fixed8 a, Fixed6 b) => a.I * 1e-14 * b.I;
        public static double operator *(Fixed6 a, Fixed8 b) => a.I * 1e-14 * b.I;
        public static double operator *(Fixed8 a, Fixed7 b) => a.I * 1e-15 * b.I;
        public static double operator *(Fixed7 a, Fixed8 b) => a.I * 1e-15 * b.I;
        public static double operator *(Fixed8 a, Fixed8 b) => a.I * 1e-16 * b.I;
        public static double operator /(Fixed8 a, long b) => a.I * 1e-8 / b;
        public static double operator /(long a, Fixed8 b) => a / (b.I * 1e-8);
        public static double operator /(Fixed8 a, double b) => a.I * 1e-8 / b;
        public static double operator /(double a, Fixed8 b) => a / b.I * 1e8;
        public static double operator /(Fixed8 a, Fixed1 b) => a.I * 1e-7 / b.I;
        public static double operator /(Fixed1 a, Fixed8 b) => a.I * 1e7 / b.I;
        public static double operator /(Fixed8 a, Fixed2 b) => a.I * 1e-6 / b.I;
        public static double operator /(Fixed2 a, Fixed8 b) => a.I * 1e6 / b.I;
        public static double operator /(Fixed8 a, Fixed3 b) => a.I * 1e-5 / b.I;
        public static double operator /(Fixed3 a, Fixed8 b) => a.I * 1e5 / b.I;
        public static double operator /(Fixed8 a, Fixed4 b) => a.I * 1e-4 / b.I;
        public static double operator /(Fixed4 a, Fixed8 b) => a.I * 1e4 / b.I;
        public static double operator /(Fixed8 a, Fixed5 b) => a.I * 1e-3 / b.I;
        public static double operator /(Fixed5 a, Fixed8 b) => a.I * 1e3 / b.I;
        public static double operator /(Fixed8 a, Fixed6 b) => a.I * 1e-2 / b.I;
        public static double operator /(Fixed6 a, Fixed8 b) => a.I * 1e2 / b.I;
        public static double operator /(Fixed8 a, Fixed7 b) => a.I * 1e-1 / b.I;
        public static double operator /(Fixed7 a, Fixed8 b) => a.I * 1e1 / b.I;
        public static double operator /(Fixed8 a, Fixed8 b) => (double)a.I / b.I;
    }

    public struct Fixed9
    {
        internal readonly long I;
        internal Fixed9(long v) => I = v;
        public static implicit operator Fixed9(long v) => new(v * 1000000000);
        public static implicit operator double(Fixed9 v) => v.I * 1e-9;
        public override string ToString() => (I * 1e-9).ToString("#,##0.000000000");
        public static Fixed9 Round(double v) => new((long)Math.Round(v * 1e9));
        public static Fixed9 Round(decimal v) => new((long)Math.Round(v * 1e9m));
        public static Fixed9 operator +(Fixed9 a, long b) => new(a.I + b * 1000000000);
        public static Fixed9 operator +(long a, Fixed9 b) => new(a * 1000000000 + b.I);
        public static double operator +(Fixed9 a, double b) => a.I * 1e-9 + b;
        public static double operator +(double a, Fixed9 b) => a + b.I * 1e-9;
        public static Fixed9 operator +(Fixed9 a, Fixed1 b) => new(a.I + b.I * 100000000);
        public static Fixed9 operator +(Fixed1 a, Fixed9 b) => new(a.I * 100000000 + b.I);
        public static Fixed9 operator +(Fixed9 a, Fixed2 b) => new(a.I + b.I * 10000000);
        public static Fixed9 operator +(Fixed2 a, Fixed9 b) => new(a.I * 10000000 + b.I);
        public static Fixed9 operator +(Fixed9 a, Fixed3 b) => new(a.I + b.I * 1000000);
        public static Fixed9 operator +(Fixed3 a, Fixed9 b) => new(a.I * 1000000 + b.I);
        public static Fixed9 operator +(Fixed9 a, Fixed4 b) => new(a.I + b.I * 100000);
        public static Fixed9 operator +(Fixed4 a, Fixed9 b) => new(a.I * 100000 + b.I);
        public static Fixed9 operator +(Fixed9 a, Fixed5 b) => new(a.I + b.I * 10000);
        public static Fixed9 operator +(Fixed5 a, Fixed9 b) => new(a.I * 10000 + b.I);
        public static Fixed9 operator +(Fixed9 a, Fixed6 b) => new(a.I + b.I * 1000);
        public static Fixed9 operator +(Fixed6 a, Fixed9 b) => new(a.I * 1000 + b.I);
        public static Fixed9 operator +(Fixed9 a, Fixed7 b) => new(a.I + b.I * 100);
        public static Fixed9 operator +(Fixed7 a, Fixed9 b) => new(a.I * 100 + b.I);
        public static Fixed9 operator +(Fixed9 a, Fixed8 b) => new(a.I + b.I * 10);
        public static Fixed9 operator +(Fixed8 a, Fixed9 b) => new(a.I * 10 + b.I);
        public static Fixed9 operator +(Fixed9 a, Fixed9 b) => new(a.I + b.I);
        public static Fixed9 operator -(Fixed9 a, long b) => new(a.I - b * 1000000000);
        public static Fixed9 operator -(long a, Fixed9 b) => new(a * 1000000000 - b.I);
        public static double operator -(Fixed9 a, double b) => a.I * 1e-9 - b;
        public static double operator -(double a, Fixed9 b) => a - b.I * 1e-9;
        public static Fixed9 operator -(Fixed9 a, Fixed1 b) => new(a.I - b.I * 100000000);
        public static Fixed9 operator -(Fixed1 a, Fixed9 b) => new(a.I * 100000000 - b.I);
        public static Fixed9 operator -(Fixed9 a, Fixed2 b) => new(a.I - b.I * 10000000);
        public static Fixed9 operator -(Fixed2 a, Fixed9 b) => new(a.I * 10000000 - b.I);
        public static Fixed9 operator -(Fixed9 a, Fixed3 b) => new(a.I - b.I * 1000000);
        public static Fixed9 operator -(Fixed3 a, Fixed9 b) => new(a.I * 1000000 - b.I);
        public static Fixed9 operator -(Fixed9 a, Fixed4 b) => new(a.I - b.I * 100000);
        public static Fixed9 operator -(Fixed4 a, Fixed9 b) => new(a.I * 100000 - b.I);
        public static Fixed9 operator -(Fixed9 a, Fixed5 b) => new(a.I - b.I * 10000);
        public static Fixed9 operator -(Fixed5 a, Fixed9 b) => new(a.I * 10000 - b.I);
        public static Fixed9 operator -(Fixed9 a, Fixed6 b) => new(a.I - b.I * 1000);
        public static Fixed9 operator -(Fixed6 a, Fixed9 b) => new(a.I * 1000 - b.I);
        public static Fixed9 operator -(Fixed9 a, Fixed7 b) => new(a.I - b.I * 100);
        public static Fixed9 operator -(Fixed7 a, Fixed9 b) => new(a.I * 100 - b.I);
        public static Fixed9 operator -(Fixed9 a, Fixed8 b) => new(a.I - b.I * 10);
        public static Fixed9 operator -(Fixed8 a, Fixed9 b) => new(a.I * 10 - b.I);
        public static Fixed9 operator -(Fixed9 a, Fixed9 b) => new(a.I - b.I);
        public static Fixed9 operator *(Fixed9 a, long b) => new(a.I * b);
        public static Fixed9 operator *(long a, Fixed9 b) => new(a * b.I);
        public static double operator *(Fixed9 a, double b) => a.I * 1e-9 * b;
        public static double operator *(double a, Fixed9 b) => a * b.I * 1e-9;
        public static double operator *(Fixed9 a, Fixed1 b) => a.I * 1e-10 * b.I;
        public static double operator *(Fixed1 a, Fixed9 b) => a.I * 1e-10 * b.I;
        public static double operator *(Fixed9 a, Fixed2 b) => a.I * 1e-11 * b.I;
        public static double operator *(Fixed2 a, Fixed9 b) => a.I * 1e-11 * b.I;
        public static double operator *(Fixed9 a, Fixed3 b) => a.I * 1e-12 * b.I;
        public static double operator *(Fixed3 a, Fixed9 b) => a.I * 1e-12 * b.I;
        public static double operator *(Fixed9 a, Fixed4 b) => a.I * 1e-13 * b.I;
        public static double operator *(Fixed4 a, Fixed9 b) => a.I * 1e-13 * b.I;
        public static double operator *(Fixed9 a, Fixed5 b) => a.I * 1e-14 * b.I;
        public static double operator *(Fixed5 a, Fixed9 b) => a.I * 1e-14 * b.I;
        public static double operator *(Fixed9 a, Fixed6 b) => a.I * 1e-15 * b.I;
        public static double operator *(Fixed6 a, Fixed9 b) => a.I * 1e-15 * b.I;
        public static double operator *(Fixed9 a, Fixed7 b) => a.I * 1e-16 * b.I;
        public static double operator *(Fixed7 a, Fixed9 b) => a.I * 1e-16 * b.I;
        public static double operator *(Fixed9 a, Fixed8 b) => a.I * 1e-17 * b.I;
        public static double operator *(Fixed8 a, Fixed9 b) => a.I * 1e-17 * b.I;
        public static double operator *(Fixed9 a, Fixed9 b) => a.I * 1e-18 * b.I;
        public static double operator /(Fixed9 a, long b) => a.I * 1e-9 / b;
        public static double operator /(long a, Fixed9 b) => a / (b.I * 1e-9);
        public static double operator /(Fixed9 a, double b) => a.I * 1e-9 / b;
        public static double operator /(double a, Fixed9 b) => a / b.I * 1e9;
        public static double operator /(Fixed9 a, Fixed1 b) => a.I * 1e-8 / b.I;
        public static double operator /(Fixed1 a, Fixed9 b) => a.I * 1e8 / b.I;
        public static double operator /(Fixed9 a, Fixed2 b) => a.I * 1e-7 / b.I;
        public static double operator /(Fixed2 a, Fixed9 b) => a.I * 1e7 / b.I;
        public static double operator /(Fixed9 a, Fixed3 b) => a.I * 1e-6 / b.I;
        public static double operator /(Fixed3 a, Fixed9 b) => a.I * 1e6 / b.I;
        public static double operator /(Fixed9 a, Fixed4 b) => a.I * 1e-5 / b.I;
        public static double operator /(Fixed4 a, Fixed9 b) => a.I * 1e5 / b.I;
        public static double operator /(Fixed9 a, Fixed5 b) => a.I * 1e-4 / b.I;
        public static double operator /(Fixed5 a, Fixed9 b) => a.I * 1e4 / b.I;
        public static double operator /(Fixed9 a, Fixed6 b) => a.I * 1e-3 / b.I;
        public static double operator /(Fixed6 a, Fixed9 b) => a.I * 1e3 / b.I;
        public static double operator /(Fixed9 a, Fixed7 b) => a.I * 1e-2 / b.I;
        public static double operator /(Fixed7 a, Fixed9 b) => a.I * 1e2 / b.I;
        public static double operator /(Fixed9 a, Fixed8 b) => a.I * 1e-1 / b.I;
        public static double operator /(Fixed8 a, Fixed9 b) => a.I * 1e1 / b.I;
        public static double operator /(Fixed9 a, Fixed9 b) => (double)a.I / b.I;
    }

    public static class FixedSerialize
    {
        public static Date ToDate(this Vint v) => new((int)v.I);
        public static Vint ToVint(this Date f) => new(f.I);
        public static Time ToTime(this Vint v) => new((int)v.I);
        public static Vint ToVint(this Time f) => new(f.I);
        public static Fixed1 ToFixed1(this Vint v) => new(v.I);
        public static Vint ToVint(this Fixed1 f) => new(f.I);
        public static Fixed2 ToFixed2(this Vint v) => new(v.I);
        public static Vint ToVint(this Fixed2 f) => new(f.I);
        public static Fixed3 ToFixed3(this Vint v) => new(v.I);
        public static Vint ToVint(this Fixed3 f) => new(f.I);
        public static Fixed4 ToFixed4(this Vint v) => new(v.I);
        public static Vint ToVint(this Fixed4 f) => new(f.I);
        public static Fixed5 ToFixed5(this Vint v) => new(v.I);
        public static Vint ToVint(this Fixed5 f) => new(f.I);
        public static Fixed6 ToFixed6(this Vint v) => new(v.I);
        public static Vint ToVint(this Fixed6 f) => new(f.I);
        public static Fixed7 ToFixed7(this Vint v) => new(v.I);
        public static Vint ToVint(this Fixed7 f) => new(f.I);
        public static Fixed8 ToFixed8(this Vint v) => new(v.I);
        public static Vint ToVint(this Fixed8 f) => new(f.I);
        public static Fixed9 ToFixed9(this Vint v) => new(v.I);
        public static Vint ToVint(this Fixed9 f) => new(f.I);
    }
}